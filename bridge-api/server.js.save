// ionos-vm-poc/bridge-api/server.js

import express from "express";
import fetch from "node-fetch";
import cors from "cors";

const app = express();
app.use(express.json());

// CORS: allow your OpenWebUI origin
app.use(cors({
  origin: ["https://chat.agnsai.ddns.net"],
  methods: ["GET", "POST", "OPTIONS"],
  allowedHeaders: ["Content-Type", "Authorization"],
  credentials: false
}));

const {
  PORT = 3000,
  WP_BASE_URL,
  WP_USER,
  WP_APP_PASSWORD
} = process.env;

// WordPress REST API endpoint
const wp_rest_url = `${WP_BASE_URL}/wp-json/wp/v2/posts`;

function wpHeaders() {
  const token = Buffer.from(`${WP_USER}:${WP_APP_PASSWORD}`).toString("base64");
  return {
    "Authorization": `Basic ${token}`,
    "Content-Type": "application/json"
  };
}

// Create a post
app.post("/posts", async (req, res) => {
  try {
    const { title, content, status = "publish" } = req.body;
    if (!title || !content) {
      return res.status(400).json({ error: "Missing title or content" });
    }
    const r = await fetch(wp_rest_url, {
      method: "POST",
      headers: wpHeaders(),
      body: JSON.stringify({ title, content, status })
    });
    const data = await r.json();
    if (!r.ok) return res.status(r.status).json({ error: "WP error", detail: data });
    res.json(data);
  } catch (e) {
    res.status(500).json({ error: "Bridge error", detail: e.message + " " + wp_rest_url });
  }
});

// Get recent posts
app.get("/posts", async (req, res) => {
  try {
    const search = req.query.search || "";
    const page = parseInt(req.query.page) || 1;
    const per_page = parseInt(req.query.per_page) || 10;
    const r = await fetch(wp_rest_url`?search=${encodeURIComponent(search)}&page=${page}&per_page=${per_page}`, {  
      headers: wpHeaders() // if you want to retrieve protected fields
    });
    const data = await r.json();
    if (!r.ok) return res.status(r.status).json({ error: "WP error", detail: data });
    res.json(data);
  } catch (e) {
    res.status(500).json({ error: "Bridge error", detail: e.message });
  }
});

app.listen(PORT, () => {
  console.log(`Bridge running on :${PORT}`);
});
